package com.carlosolimpio.minhasvendas.data

import com.carlosolimpio.minhasvendas.data.local.db.OrderDao
import com.carlosolimpio.minhasvendas.data.local.entity.ItemEntity
import com.carlosolimpio.minhasvendas.data.local.entity.OrderEntity
import com.carlosolimpio.minhasvendas.data.local.toOrder
import com.carlosolimpio.minhasvendas.data.local.toOrderEntity
import com.carlosolimpio.minhasvendas.domain.core.OrderNotFoundException
import com.carlosolimpio.minhasvendas.domain.core.Resource
import com.carlosolimpio.minhasvendas.domain.order.Order
import com.carlosolimpio.minhasvendas.domain.order.OrderRepository

class OrderRepositoryImpl(private val orderDao: OrderDao) : OrderRepository {

    override suspend fun retrieveOrderId(): Resource<Long> {
        return Resource.Success(orderDao.insertOrder(dummyOrder))
    }

    override suspend fun deleteOrderId(id: Long): Resource<Boolean> {
        if (isNotValidId(id))
            return Resource.Error(null, IllegalArgumentException("Invalid id: $id"))

        val rowDeletedCount = orderDao.deleteOrder(id)
        return if (rowDeletedCount == 1) {
            Resource.Success(true)
        } else {
            Resource.Error(
                null,
                OrderNotFoundException(
                    "While trying to delete, the order was not found for the id = $id"
                )
            )
        }
    }

    override suspend fun saveOrder(order: Order): Resource<Boolean> {
        if (isNotValidOrder(order))
            return Resource.Error(null, IllegalArgumentException("Invalid order: $order"))

        val savedId = orderDao.insertOrder(order.toOrderEntity())
        return Resource.Success(!isNotValidId(savedId))
    }

    override suspend fun getOrderFromId(id: Long): Resource<Order?> {
        if (isNotValidId(id))
            return Resource.Error(null, IllegalArgumentException("Invalid id: $id"))

        val orderEntity = orderDao.getOrderFromId(id)
        return if (orderEntity != null) {
            Resource.Success(orderEntity.toOrder())
        } else {
            Resource.Error(null, OrderNotFoundException("Order not found for the id = $id"))
        }
    }

    override suspend fun getAllOrders(): Resource<List<Order>> {
        val orderList = orderDao.getAllOrders()

        return if (orderList.isNotEmpty()) {
            Resource.Success(orderList.map { it.toOrder() })
        } else {
            Resource.Error(null, OrderNotFoundException("Nenhum pedido cadastrado"))
        }
    }

    private fun isNotValidId(id: Long) = id <= 0L
    private fun isNotValidOrder(order: Order): Boolean {
        return isNotValidId(order.number) || order.clientName.isEmpty() || order.items.isEmpty()
    }

    companion object {

        /**
         * Used only to fetch the next orderId auto-generated by Room DB
         * This id will be used to store the next to be added Order.
         */
        private val dummyOrder = OrderEntity(
            clientName = "dummy",
            items = listOf(ItemEntity("dummy", 0, 0.0))
        )
    }
}
